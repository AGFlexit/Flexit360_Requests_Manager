Imports System.Data.OleDb
Imports DevExpress.XtraGrid.Views.Grid
Imports System.Text.RegularExpressions
Imports DevExpress.XtraGrid.Views.Base
Imports System.Net
Imports System.IO
Imports Newtonsoft.Json.Linq
Imports System.Text
Imports System.Threading
Imports DevExpress.XtraEditors.Controls
Imports System.ComponentModel
Imports System.Linq
Imports DevExpress.XtraEditors
Imports DevExpress.XtraLayout
Imports System.Timers

Partial Public Class MenuV2
    Private CurrentUserID As Integer

    Public Sub New()
        InitializeComponent()
        ' This line of code is generated by Data Source Configuration Wizard
        Me.repoDateEdit.TodayDate = Now()
        'AddHandler Me.repoDateEdit.TodayClick, Sub(sender, e)

        '                                           Me.repoDateEdit. = Now()
        '                                           Me.repoDateEdit.EditValue = Now()
        '                                       End Sub

        Select Case UCase(Environment.UserName)
            Case "T989040", "T970773", "T931026" ', "HELLF"
                navBarControl.ActiveGroup = DefectsNavBarGroup
                'Me.GridControl1.Visible = False
                'Me.GridControl2.Visible = True
            Case Else
                navBarControl.ActiveGroup = RequestsNavBarGroup
                'Me.GridControl1.Visible = True
                'Me.GridControl2.Visible = False
        End Select
        'Dim RichTxtEdit As RichTextBox
        AddHandler GVIssues.EditFormPrepared, Sub(s, e)
                                                  ' The 'e.BindableControls' collection contains the editors in the Edit Form.
                                                  Dim RichTxtEdit As Control = e.BindableControls(GridColumn34)
                                                  'RichTxtEdit.Text = e.RowHandle
                                                  Dim row As DataRow = GVIssues.GetDataRow(e.RowHandle)
                                                  'Dim description As String = row("Description").ToString()
                                                  RichTxtEdit.Text = If(String.IsNullOrEmpty(row("Description").ToString()), String.Empty, String.Format(StripTags(row("Description").ToString()))) 'StripTags(row("Description").ToString())
                                                  'For Each item As Control In e.BindableControls
                                                  'RichTxtEdit.
                                                  NewCommentIssueID = CInt(row("ID").ToString)
                                                  'Dim MemoAudit As Control = e.BindableControls(colAudit)
                                                  Dim rowAudit As DataRow() = row.GetChildRows("IssuesAudit")
                                                  If rowAudit.Count > 0 Then
                                                      'MemoAudit.Text = rowAudit(rowAudit.Count - 1)("Comment").ToString
                                                      Dim highestID As Integer = rowAudit.Max(Function(r) Convert.ToInt32(r("ID")))
                                                      Dim highestIDRow As DataRow = rowAudit.FirstOrDefault(Function(r) Convert.ToInt32(r("ID")) = highestID)
                                                      If highestIDRow IsNot Nothing Then
                                                          'MemoAudit.Text = highestIDRow("Comment").ToString()
                                                          'MemoAudit.Tag = highestIDRow("Comment").ToString()
                                                          'MemoAudit.
                                                      End If
                                                  Else
                                                      'MemoAudit.Tag = ""
                                                      'MemoAudit.Text = ""
                                                  End If
                                              End Sub

    End Sub
    Private Sub MenuV2_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        LoadDataAsync()
    End Sub

    Private Sub GridView1_CalcPreviewText(sender As Object, e As CalcPreviewTextEventArgs) Handles GVIssues.CalcPreviewText
        e.PreviewText = CalculateMyPreviewText(e.RowHandle)
    End Sub

    Private Function CalculateMyPreviewText(rowHandle As Integer) As String
        On Error Resume Next
        Dim row As DataRow = GVIssues.GetDataRow(rowHandle)
        'Dim mpgcity As String = row("MPG City").ToString()
        'Dim mpghwy As String = row("MPG Highway").ToString()
        Dim description As String = row("Description").ToString()
        Return If(String.IsNullOrEmpty(description), String.Empty, String.Format(StripTags(description)))

    End Function

    Function StripTags(ByVal html As String) As String
        On Error Resume Next
        'Return Regex.Replace(html, "<(.|\n)*?>", String.Empty)
        Return Regex.Replace(Regex.Replace(Regex.Replace(Replace(html, "&nbsp;", String.Empty), "<(.|\n)*?>", String.Empty), "(\r?\n){2,}", vbCrLf), "^[\s]+|[\s]+$", String.Empty, RegexOptions.Multiline)
    End Function

    Private Sub RepositoryItemRichTextEdit1_EditValueChanged(sender As Object, e As EventArgs) Handles RepositoryItemRichTextEdit1.EditValueChanged
        'Me.RepositoryItemRichTextEdit1.DocumentFormat
        'Me.RepositoryItemRichTextEdit1.ConvertEditValueToPlainText(Me.RepositoryItemRichTextEdit1.ToString)
    End Sub

    Private Sub BarButtonItem1_ItemClick(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarButtonItem1.ItemClick
        Dim oFrm As New RadForm1
        oFrm.Show()
    End Sub

    Private Sub BarToggleSwitchPreview_CheckedChanged(sender As Object, e As DevExpress.XtraBars.ItemClickEventArgs) Handles BarToggleSwitchPreview.CheckedChanged
        If Me.BarToggleSwitchPreview.Checked = False Then
            If navigationFrame.SelectedPage Is Me.DefectsNavigationPage Then
                Me.GridView9.OptionsView.ShowPreview = False
            ElseIf navigationFrame.SelectedPage Is Me.RequestsNavigationPage Then
                Me.GVIssues.OptionsView.ShowPreview = False
            End If
        Else
            If navigationFrame.SelectedPage Is Me.DefectsNavigationPage Then
                Me.GridView9.OptionsView.ShowPreview = True
            ElseIf navigationFrame.SelectedPage Is Me.RequestsNavigationPage Then
                Me.GVIssues.OptionsView.ShowPreview = True
            End If
        End If
    End Sub

    Private QryUpdHoursComments As String = ""
    Private issueID As Integer
    Private dateAdded As DateTime
    Private dateAddedRng As DateRangeCollection
    Private quantity As Decimal
    Private employee As String
    Private billable As Boolean
    Private details As String


    Private Sub GVIssues_MouseDown(sender As Object, e As MouseEventArgs) Handles GVIssues.MouseDown
        If (Control.ModifierKeys And Keys.Control) <> Keys.Control Then
            Dim view As GridView = TryCast(sender, GridView)
            Dim hi As DevExpress.XtraGrid.Views.Grid.ViewInfo.GridHitInfo = view.CalcHitInfo(e.Location)
            If hi.InRowCell Then
                If hi.Column.RealColumnEdit.Name = "RepoBtnAddComment" Then
                    Dim row As DataRow = GVIssues.GetDataRow(hi.RowHandle)
                    NewCommentIssueID = CInt(row("ID").ToString)
                    Dim myControl As New AddCommentUserControl()
                    If XtraDialog.Show(myControl, "Enter comment", MessageBoxButtons.OKCancel) = System.Windows.Forms.DialogResult.OK Then
                        QryUpdHoursComments = "INSERT INTO Audit (IssueID, DateAdded, Username, Comment) VALUES (" & NewCommentIssueID & ", #" & Now() & "#, '" & UCase(Environment.UserName) & "', '" & myControl.Comment & "')"
                        LoadDataAsync_NavBar("FillAudit")
                    End If
                ElseIf hi.Column.RealColumnEdit.Name = "RepoButtonHours" Then
                    Dim row As DataRow = GVIssues.GetDataRow(hi.RowHandle)
                    NewCommentIssueID = CInt(row("ID").ToString)
                    'Dim myControl As New AddHoursUserControl()
                    Dim myControl As New AddHoursMultiDaysUserControl()
                    If XtraDialog.Show(myControl, "Enter time", MessageBoxButtons.OKCancel) = System.Windows.Forms.DialogResult.OK Then
                        Dim employee As String = Me.Tag
                        Using connection As New OleDb.OleDbConnection(My.Settings.DB_Connection)
                            connection.Open()

                            'For Each hoursWorked In myControl.WorkedHours
                            '    InsertRecord(hoursWorked, NewCommentIssueID, employee, connection)
                            'Next
                            InsertRecord(myControl.AddDate, NewCommentIssueID, myControl.Quantity, Me.Tag, myControl.Billable, myControl.Details, connection)
                        End Using
                        LoadDataAsync_NavBar("FillHours")
                        ''Dim heurespoint As String = myControl.Quantity.ToString(Globalization.CultureInfo.InvariantCulture)
                        'issueID = NewCommentIssueID

                        'dateAdded = myControl.AddDate
                        'dateAddedRng = myControl.DateRange
                        'quantity = Convert.ToDecimal(myControl.Quantity) '.ToString(Globalization.CultureInfo.InvariantCulture)
                        'employee = Me.Tag
                        'billable = myControl.Billable
                        'details = myControl.Details
                        'QryUpdHoursComments = "INSERT INTO tbl_HoursWorkedLog (Issue_ID, Hours_Worked_Date, Hours_Worked_Amt, Employee, Billable, Details) VALUES (?, ?, ?, ?, ?, ?)"
                        ''QryUpdHoursComments = "INSERT INTO tbl_HoursWorkedLog (Issue_ID, Employee, Hours_Worked_Date, Hours_Worked_Amt, Billable, Details) VALUES (" & NewCommentIssueID & ", '" & Me.Tag & "', #" & myControl.AddDate & "#, " & myControl.Quantity.ToString(Globalization.CultureInfo.InvariantCulture) & ", " & myControl.Billable & ", '" & myControl.Details & "')"
                        'LoadDataAsync_NavBar("FillHours")
                        ''Dim conn As New OleDbConnection(My.Settings.DB_Connection)
                        ''Dim cmd As New OleDbCommand("INSERT INTO tbl_HoursWorkedLog (Issue_ID, Employee, Hours_Worked_Date, Hours_Worked_Amt, Billable, Details) VALUES (" & NewCommentIssueID & ", '" & Me.Tag & "', #" & myControl.AddDate & "#, " & myControl.Quantity & ", " & myControl.Billable & ", '" & myControl.Details & "')", conn)

                        ''Using conn
                        ''    conn.Open()
                        ''    If CInt(cmd.ExecuteNonQuery) > 0 Then
                        ''        MsgBox("Successfully saved!", , "Success!")
                        ''        Me.Tbl_HoursWorkedLogTableAdapter1.Fill(Me.ProdSupport_DataSet1.tbl_HoursWorkedLog)
                        ''    Else
                        ''        MsgBox("Hours failed to save!", "Error!")
                        ''    End If
                        ''    'Me.TextEdit2.Text = ""
                        ''End Using
                        ''conn.Close()
                        ''Dim DateHours As DateTime = myControl.AddDate
                        ''Dim Qty As Double = myControl.Quantity
                        ''Dim Billable As Boolean = myControl.Billable
                        ''Dim Details As String = myControl.Details
                        '' string password = myControl.Password;
                    End If
                End If
            End If
        End If
    End Sub

    Private Sub StatusCbo_EditValueChanged(sender As Object, e As EventArgs) Handles StatusCbo.EditValueChanged

        Dim ticketkey As String
        Dim summary As String
        Dim createdFLEXS As DateTime
        Dim DefOrEnh As String = ""

        If NewValuectrl = "Completed - Defect Created" Or NewValuectrl = "Completed - Enhancement Requested" Then
            If IsNothing(GVIssues.GetFocusedRowCellValue("FLEXS Ticket")) Or IsDBNull(GVIssues.GetFocusedRowCellValue("FLEXS Ticket")) Then
                'XtraMessageBox.Show("The FLEXS ticket field cannot be blank when using this status!", "No FLEXS number!", MessageBoxButtons.OK, MessageBoxIcon.Error)
                Exit Sub
            End If

            If NewValuectrl = "Completed - Defect Created" Then
                DefOrEnh = "Confirmed Defect"
            ElseIf e.ToString = "Completed - Enhancement Requested" Then
                DefOrEnh = "Enhancement - Escalated to Product"
            End If

            ticketkey = GVIssues.GetFocusedRowCellValue("FLEXS Ticket") '(colFLEXSTicket).Text 'e.BindableControls(colAudit)
            ' Fetch the ticket details, including comments and activity history
            Dim detailsRequest As HttpWebRequest = DirectCast(WebRequest.Create("https://jira.tools.telushealth.com/rest/api/2/issue/FLEXS-" & ticketkey), HttpWebRequest)
            detailsRequest.Headers.Add("Authorization", "Bearer ODAwNDc5MDE5OTk4Op6GvljcN/HFEyy5z1uJQyoV8F6m") ' Replace YOUR_API_TOKEN with your JIRA API token
            detailsRequest.ContentType = "application/json"
            detailsRequest.Method = "GET"

            'Dim json As String = client.DownloadString(url)

            Dim detailsResponse As WebResponse = detailsRequest.GetResponse()
            Dim detailsReader As StreamReader = New StreamReader(detailsResponse.GetResponseStream())
            Dim detailsResponseString As String = detailsReader.ReadToEnd()


            ' Parse the JSON response to get the comments and activity history
            'Dim obj As JObject = JObject.Parse(json)
            'Dim issues As JArray = obj("issues")
            Dim details As JObject = JObject.Parse(detailsResponseString)
            'Dim summary As String = issue("fields")("summary").ToString()
            summary = details.SelectToken("fields.summary").ToString
            createdFLEXS = CDate(details.SelectToken("fields.created").ToString)

            If XtraMessageBox.Show("This will create a new defect or enhancement record containing the information below, pulled from JIRA." & vbNewLine & vbNewLine & "FLEXS-" & ticketkey & ": " & summary & vbNewLine & vbNewLine & "Do you want to continue?", "Create FLEXS-" & ticketkey & " record?", MessageBoxButtons.YesNo, MessageBoxIcon.Question) = DialogResult.Yes Then

                Using connection As New OleDbConnection(My.Settings.DB_Connection)

                    Dim cmdAddIssue As New OleDbCommand("INSERT INTO Issues (Channel, Client, Title, Description, [Assigned To], [Date Received], Status, Priority, [FLEXS Ticket]) VALUES (" & GVIssues.GetFocusedRowCellValue("Channel") & ", " & GVIssues.GetFocusedRowCellValue("Client") & ", '" & summary.Replace("'", "''") & "' , 'FLEXS Ticket', 226, #" & createdFLEXS & "#, '" & DefOrEnh & "', NULL, " & ticketkey.Replace("FLEXS-", "") & ");", connection)
                    connection.Open()
                    If cmdAddIssue.ExecuteNonQuery > 0 Then
                        MsgBox("Defect Created!", vbOKOnly, "Success")
                    Else
                        MsgBox("Failed to create new defect!", vbOKOnly, "Error")
                    End If
                End Using
            Else
                Me.StatusCbo.CancelUpdate()
                GVIssues.SetFocusedRowCellValue("Status", OldValuectrl) ' = OldValuectrl 'Me.StatusCbo.Tag
            End If
        Else
            Exit Sub
        End If

    End Sub


    Private Sub GVIssues_ValidatingEditor(sender As Object, e As BaseContainerValidateEditorEventArgs) Handles GVIssues.ValidatingEditor

        Dim view As ColumnView = sender
        Dim column As DevExpress.XtraGrid.Columns.GridColumn = If(TryCast(e, EditFormValidateEditorEventArgs)?.Column, view.FocusedColumn)
        If column.Name <> "colStatus" Then Exit Sub
        If NewValuectrl = "Completed - Defect Created" Or NewValuectrl = "Completed - Enhancement Requested" Then
            If GVIssues.GetFocusedRowCellValue("FLEXS Ticket") Is "" Or IsNothing(GVIssues.GetFocusedRowCellValue("FLEXS Ticket")) Or IsDBNull(GVIssues.GetFocusedRowCellValue("FLEXS Ticket")) Then
                e.Valid = False
            End If
        End If
        'If (Convert.ToInt32(e.Value) < 0) Or (Convert.ToInt32(e.Value) > 1000000) Then
        '    e.Valid = False
        'End If
    End Sub


    Private Sub GVIssues_InvalidValueException(sender As Object, e As InvalidValueExceptionEventArgs) Handles GVIssues.InvalidValueException
        Dim view As ColumnView = sender
        If view Is Nothing Then
            Return
        End If
        'e.ExceptionMode = ExceptionMode.DisplayError

        e.ExceptionMode = ExceptionMode.Ignore
        e.WindowCaption = "No FLEXS number!"
        e.ErrorText = "The FLEXS ticket field cannot be blank when using this status!"
    End Sub

    'XtraMessageBox.Show("The FLEXS ticket field cannot be blank when using this status!", "No FLEXS number!", MessageBoxButtons.OK, MessageBoxIcon.Error)
    Private OldValuectrl As String
    Private NewValuectrl As String
    Private Sub StatusCbo_EditValueChanging(sender As Object, e As ChangingEventArgs) Handles StatusCbo.EditValueChanging
        OldValuectrl = e.OldValue.ToString
        NewValuectrl = e.NewValue.ToString
    End Sub


#Region "Data Updates"

    Private Sub GVIssues_RowUpdated(sender As Object, e As RowObjectEventArgs) Handles GVIssues.RowUpdated
        'Dim view As ColumnView = TryCast(GCtrlRequests.FocusedView, ColumnView)

        'view.CloseEditor()
        'If view.UpdateCurrentRow() Then
        Try
            IssuesTableAdapter1.Update(Me.ProdSupport_DataSet1.Issues)
        Catch Ex As Exception
            MsgBox("Update failed!" & vbNewLine & vbNewLine & Ex.Message, MsgBoxStyle.Critical, "Error")
            Exit Sub
        End Try
        MsgBox("Successfully updated the record!", MsgBoxStyle.Information, "Success")
        'End If
    End Sub


    Private Sub GVIssues_HiddenEditor(sender As Object, e As EventArgs) Handles GVIssues.HiddenEditor

    End Sub

    Private Sub GVIssues_DataSourceChanged(sender As Object, e As EventArgs) Handles GVIssues.DataSourceChanged

    End Sub

    Private NewCommentIssueID As Integer = Nothing

    Private Sub GVIssues_EditFormHidden(sender As Object, e As EditFormHiddenEventArgs) Handles GVIssues.EditFormHidden
        'If e.Result = EditFormResult.Update Then
        '    If e.BindableControls(colAudit).Text <> e.BindableControls(colAudit).Tag Then
        '        Dim NewAudit As DataRow = Me.ProdSupport_DataSet1.Audit.NewRow()
        '        NewAudit("IssueID") = CInt(GVIssues.GetDataRow(e.RowHandle)("ID").ToString())
        '        NewAudit("DateCreated") = Now()
        '        NewAudit("Username") = UCase(Environment.UserName)
        '        NewAudit("Comment") = e.BindableControls(colAudit).Text
        '        Me.ProdSupport_DataSet1.Audit.Rows.Add(NewAudit)
        '        GVIssues.GetDataRow(e.RowHandle)("ID").ToString()
        '        AuditTableAdapter1.Adapter.Update(Me.ProdSupport_DataSet1.Audit)
        '    End If
        'End If
    End Sub

    Private Sub SimpleButton1_Click(sender As Object, e As EventArgs) Handles SimpleButton1.Click
        Dim myControl As New AddHoursUserControl()
        If XtraDialog.Show(myControl, "Enter time", MessageBoxButtons.OKCancel) = System.Windows.Forms.DialogResult.OK Then
            Dim DateHours As DateTime = myControl.AddDate
            Dim Qty As Double = myControl.Quantity
            Dim Billable As Boolean = myControl.Billable
            Dim Details As String = myControl.Details
            ' string password = myControl.Password;
        End If
        'Dim conn As New OleDbConnection(My.Settings.DB_Connection)
        'Dim cmd As New OleDbCommand("INSERT INTO Audit (IssueID, DateAdded, Username, Comment) VALUES (" & NewCommentIssueID & ", #" & Now() & "#, '" + UCase(Environment.UserName) & "', '" & Me.TextEdit2.Text & "')", conn)
        'cmd.Parameters.AddWithValue("@username", UCase(Environment.UserName))

        'Using conn
        '    conn.Open()
        '    If CInt(cmd.ExecuteNonQuery) > 0 Then
        '        MsgBox("Comment saved!", , "Success!")
        '        Me.AuditTableAdapter1.Fill(Me.ProdSupport_DataSet1.Audit)
        '    Else
        '        MsgBox("Comment failed to save!", "Error!")
        '    End If
        '    Me.TextEdit2.Text = ""
        'End Using
        'conn.Close()
        'Me.PopupContainerControl1.Hide()
        'Dim SQLAddAudit As New OleDbCommand("INSERT INTO Audit (IssueID, DateAdded, Username, Comment) VALUES (" + Me.TxtID.Text + ", #" + Now() + "#, '" + UCase(Environment.UserName) + "', '" + comment + "')", Me.AuditTableAdapter.Connection)
        ''Me.AuditTableAdapter.Connection.Open()

        ''If CInt(SQLAddAudit.ExecuteNonQuery) > 0 Then
        ''    RadCallout.Show(callout, Me.BtnAddComment, $"The comment has been saved!", "Success")
        ''    Me.AuditTableAdapter.Fill(Me.ProdSupport_DataSet.Audit)
        ''Else
        ''    RadCallout.Show(callout, Me.BtnAddComment, $"There was a problem! Try again!", "Failed")
        ''End If
        ''Me.AuditTableAdapter.Connection.Close()
        'Dim NewAudit As DataRow = Me.ProdSupport_DataSet1.Audit.NewRow()
        'NewAudit("IssueID") = NewCommentIssueID 'CInt(GVIssues.GetDataRow(e.RowHandle)("ID").ToString())
        'NewAudit("DateAdded") = Now()
        'NewAudit("Username") = UCase(Environment.UserName)
        'NewAudit("Comment") = Me.TextEdit2.Text
        'Me.ProdSupport_DataSet1.Audit.Rows.Add(NewAudit)
        ''AuditTableAdapter1.Adapter.
        'AuditTableAdapter1.Adapter.Update(Me.ProdSupport_DataSet1.Audit)
    End Sub

#End Region

#Region "Navigation"

    Private Sub navBarControl_ActiveGroupChanged(ByVal sender As Object, ByVal e As DevExpress.XtraNavBar.NavBarGroupEventArgs) Handles navBarControl.ActiveGroupChanged
        Select Case e.Group.Name
            Case "RequestsNavBarGroup"
                navigationFrame.SelectedPageIndex = navBarControl.Groups.IndexOf(e.Group)
                Me.BarToggleSwitchPreview.Checked = Me.GVIssues.OptionsView.ShowPreview = True
            Case "DefectsNavBarGroup"
                navigationFrame.SelectedPageIndex = navBarControl.Groups.IndexOf(e.Group)
                Me.BarToggleSwitchPreview.Checked = Me.GridView9.OptionsView.ShowPreview = True
            Case Else
        End Select
        'navigationFrame.SelectedPageIndex = navBarControl.Groups.IndexOf(e.Group)
    End Sub

    Private Sub navigationFrame_SelectedPageChanging(sender As Object, e As DevExpress.XtraBars.Navigation.SelectedPageChangingEventArgs) Handles navigationFrame.SelectedPageChanging
        'MsgBox(e.OldPage.Caption)
    End Sub

    Private Sub svgFLEXSBack_Click(sender As Object, e As EventArgs) Handles svgFLEXSBack.Click
        Me.navigationFrame.SelectPrevPage()
        Me.NavBarJIRASync.Enabled = True
    End Sub

    Private Sub barButtonNavigation_ItemClick(ByVal sender As Object, ByVal e As DevExpress.XtraBars.ItemClickEventArgs) Handles requestsBarButtonItem.ItemClick, DefectsBarButtonItem.ItemClick
        navBarControl.ActiveGroup = If(e.Item.Caption = "Requests", RequestsNavBarGroup, DefectsNavBarGroup)
    End Sub

    Private Sub NavBarJIRASync_LinkClicked(sender As Object, e As DevExpress.XtraNavBar.NavBarLinkEventArgs) Handles NavBarJIRASync.LinkClicked
        navigationFrame.SelectedPage = Me.JIRASyncNavigationPage 'navigationFrame.Pages(2)
        Me.NavBarJIRASync.Enabled = False
    End Sub

    Private Sub navBarControl_LinkClicked(sender As Object, e As DevExpress.XtraNavBar.NavBarLinkEventArgs) Handles navBarControl.LinkClicked
        If e.Link.Caption = "JIRA Sync" And Me.navigationFrame.SelectedPage IsNot Me.JIRASyncNavigationPage Then
            Me.NavBarJIRASync.Enabled = False
            navigationFrame.SelectedPage = Me.JIRASyncNavigationPage
        ElseIf e.Link.Caption IsNot "JIRA Sync" And Me.navigationFrame.SelectedPage Is Me.JIRASyncNavigationPage Then
            Me.NavBarJIRASync.Enabled = True
            If e.Link.Group.Name = "DefectsNavBarGroup" And Me.navigationFrame.SelectedPage IsNot Me.DefectsNavigationPage Then
                navigationFrame.SelectedPage = Me.DefectsNavigationPage
            ElseIf e.Link.Group.Name = "RequestsNavBarGroup" And Me.navigationFrame.SelectedPage IsNot Me.RequestsNavigationPage Then
                navigationFrame.SelectedPage = Me.RequestsNavigationPage
            End If
        End If
        LoadDataAsync_NavBar(e.Link.Caption)
    End Sub

#End Region

#Region "Data Loading"

    Private Sub LoadDataAsync()

        Telerik.WinControls.UI.RadOverlayManager.Show(navBarControl)

        ' Start a new thread to load the data asynchronously
        Dim loadThread As New Thread(Sub()

                                         Dim newDataSet = FillDataSet()
                                         ''FillData("FillPriorities")
                                         ''FillData("FillStatuses")
                                         ''FillData("FillCategories")
                                         'FillData("FillContacts_Extended")
                                         'FillData("FillAnalysts")
                                         'FillData("FillClients")
                                         'FillData("FillChannels")
                                         ''FillData("FillIssues")
                                         'FillData("FillHours")
                                         'FillData("FillAudit")

                                         Me.Invoke(New Action(Sub()
                                                                  ' Enable UI controls
                                                                  ' Merge newDataSet into ProdSupport_DataSet1
                                                                  'MsgBox("Starting to merge!")
                                                                  Me.ProdSupport_DataSet1.Merge(newDataSet)
                                                                  'Me.Enabled = True
                                                                  Telerik.WinControls.UI.RadOverlayManager.Close()
                                                                  'SplashScreenManager1.CloseWaitForm()
                                                                  Dim conn As New OleDbConnection(My.Settings.DB_Connection)
                                                                  Dim cmd As New OleDbCommand("SELECT ID, [Contact Name] FROM [Contacts Extended] WHERE TELUS_ID = @username", conn)
                                                                  cmd.Parameters.AddWithValue("@username", UCase(Environment.UserName))

                                                                  Using conn
                                                                      conn.Open()
                                                                      'Me.Tag = cmd.ExecuteScalar.ToString
                                                                      Dim reader As OleDbDataReader = cmd.ExecuteReader()
                                                                      If reader.Read() Then
                                                                          CurrentUserID = CInt(reader("ID").ToString())
                                                                          Me.Tag = reader("Contact Name").ToString()
                                                                      End If
                                                                  End Using
                                                                  conn.Close()
                                                              End Sub))
                                     End Sub)

        ' Start the thread
        loadThread.Start()
    End Sub

    Private Function FillDataSet() As ProdSupport_DataSet_Async
        ' Create a new instance of the dataset
        Dim newDataSet As New ProdSupport_DataSet_Async()

        ' Fill the dataset
        Try
            Me.Contacts_ExtendedTableAdapter_Async.Fill(newDataSet.Contacts_Extended)
            Me.AnalystsTableAdapter_Async.Fill(newDataSet.Analysts)
            Me.ClientsTableAdapter_Async.Fill(newDataSet.Clients)
            Me.ChannelsTableAdapter_Async.Fill(newDataSet.Channels)
            Me.Tbl_HoursWorkedLogTableAdapter_Async.Fill(newDataSet.tbl_HoursWorkedLog)
            Me.AuditTableAdapter_Async.Fill(newDataSet.Audit)
        Catch ex As Exception
            ' Log the exception details
            MessageBox.Show("An error occurred while filling the data: " & ex.Message)
        End Try

        ' Return the filled dataset
        Return newDataSet
    End Function

    Private Function FillDataSetAuditHours(ByVal fillMethod As String) As ProdSupport_DataSet_Async
        ' Create a new instance of the dataset
        Dim newDataSet As New ProdSupport_DataSet_Async()

        If fillMethod = "FillAudit" Then
            Dim conn As New OleDbConnection(My.Settings.DB_Connection)
            Dim cmd As New OleDbCommand(QryUpdHoursComments, conn)

            Using conn
                conn.Open()
                If CInt(cmd.ExecuteNonQuery) > 0 Then
                    'MsgBox("Comment saved!", , "Success!")
                    'Me.AuditTableAdapter1.Fill(Me.ProdSupport_DataSet1.Audit)
                    'If GVIssues.IsEditFormVisible Then
                    '    GVIssues.RefreshEditor(True)
                    'GVIssues.for
                    'End If
                Else
                    'MsgBox("Comment failed to save!", "Error!")
                End If
                'Me.TextEdit2.Text = ""
            End Using
            'conn.Close()
            Me.AuditTableAdapter_Async.Fill(newDataSet.Audit)

        ElseIf fillMethod = "FillHours" Then
            'Using connection As New OleDb.OleDbConnection(My.Settings.DB_Connection)
            '    connection.Open()

            '    For Each selectedRange In dateAddedRng
            '        Dim startDate As Date = selectedRange.StartDate
            '        Dim endDate As Date = selectedRange.EndDate '.AddDays(-1) ' Make endDate exclusive

            '        ' Handle single date selection
            '        If startDate = endDate Then
            '            InsertRecord(startDate, issueID, quantity, employee, billable, details, connection)
            '            Continue For
            '        End If

            '        ' Handle date range selection
            '        For currentDate As Integer = 0 To (endDate - startDate).TotalDays - 1
            '            InsertRecord(startDate.AddDays(currentDate), issueID, quantity, employee, billable, details, connection)
            '        Next
            '    Next
            'End Using
            Me.Tbl_HoursWorkedLogTableAdapter_Async.Fill(newDataSet.tbl_HoursWorkedLog)
        Else
            Exit Function
            'FillData_NavBar(fillMethod)
        End If


        ' Fill the dataset
        Try


        Catch ex As Exception
            ' Log the exception details
            MessageBox.Show("An error occurred while filling the data: " & ex.Message)
        End Try

        ' Return the filled dataset
        Return newDataSet
    End Function


    Private Sub FillData(ByVal fillMethod As String)
        ' Call the appropriate Fill method on the appropriate TableAdapter
        Try
            Select Case fillMethod
                'Case "FillPriorities"
                '    Me.PrioritiesTableAdapter.Fill(Me.ProdSupport_DataSet.Priorities)
                'Case "FillStatuses"
                '    Me.StatusesTableAdapter.Fill(Me.ProdSupport_DataSet.Statuses)
                'Case "FillCategories"
                '    Me.CategoriesTableAdapter.Fill(Me.ProdSupport_DataSet.Categories)
                Case "FillContacts_Extended"
                    Me.Contacts_ExtendedTableAdapter.Fill(Me.ProdSupport_DataSet1.Contacts_Extended)
                Case "FillAnalysts"
                    Me.AnalystsTableAdapter.Fill(Me.ProdSupport_DataSet1.Analysts)
                Case "FillClients"
                    Me.ClientsTableAdapter.Fill(Me.ProdSupport_DataSet1.Clients)
                Case "FillChannels"
                    Me.ChannelsTableAdapter.Fill(Me.ProdSupport_DataSet1.Channels)
                Case "FillHours"
                    Me.Tbl_HoursWorkedLogTableAdapter1.ClearBeforeFill = False
                    Me.Tbl_HoursWorkedLogTableAdapter1.Fill(Me.ProdSupport_DataSet1.tbl_HoursWorkedLog)
                Case "FillAudit"
                    Me.AuditTableAdapter1.ClearBeforeFill = False
                    Me.AuditTableAdapter1.Fill(Me.ProdSupport_DataSet1.Audit)
                    'Case "FillIssues"
                    '    Me.IssuesTableAdapter1.FillByActive(Me.ProdSupport_DataSet.Issues)
            End Select
        Catch ex As Exception
            ' Log the exception details
            MessageBox.Show("An error occurred while filling the " & fillMethod & " data: " & ex.Message)
        End Try
    End Sub

    Private Sub FillData_NavBar(ByVal fillMethod As String)
        Me.IssuesTableAdapter1.ClearBeforeFill = False
        ' Call the appropriate Fill method on the appropriate TableAdapter
        Try
            Select Case fillMethod
                Case Me.NavBarResolved.Caption 'Resolved
                    IssuesTableAdapter1.FillByAll(ProdSupport_DataSet1.Issues)
                    issuesBindingSource.Filter = "Status NOT IN ('Escalated - Production Script', 'Escalated to IT', 'Escalated to Product', 'Future Work', 'In Progress', 'Not Started', 'On Hold (Client)', 'Projects', 'Recurring Task','AODA - Confirmed Defect','AODA - Enhancement','Confirmed Defect','Enhancement - Escalated to Product','AODA - Confirmed Defect Fixed','AODA - Enhancement Released','Confirmed Defect - Fixed','Enhancement - Released')"
                Case Me.NavBarAllRequests.Caption 'All Requests
                    IssuesTableAdapter1.FillByAll(ProdSupport_DataSet1.Issues)
                    issuesBindingSource.RemoveFilter()
                Case Me.NavBarAssignedMe.Caption 'Assigned To Me
                    IssuesTableAdapter1.FillByAnalyst(ProdSupport_DataSet1.Issues, CurrentUserID)
                    issuesBindingSource.Filter = "Status IN ('Escalated - Production Script', 'Escalated to IT', 'Escalated to Product', 'Future Work', 'In Progress', 'Not Started', 'On Hold (Client)', 'Projects', 'Recurring Task') AND [Assigned To] = " & CurrentUserID
                Case Me.NavBarUnresolved.Caption 'Unresolved
                    IssuesTableAdapter1.FillByActive(ProdSupport_DataSet1.Issues)
                    issuesBindingSource.Filter = "Status IN ('Escalated - Production Script', 'Escalated to IT', 'Escalated to Product', 'Future Work', 'In Progress', 'Not Started', 'On Hold (Client)', 'Projects', 'Recurring Task')"
                Case Me.NavBarDefects.Caption 'Open Defects
                    FLEXSMgmtTableAdapter.FillActiveDefects(ProdSupport_DataSet1.FLEXSMgmt)
                    FLEXSMgmtBindingSource.Filter = "Status IN ('AODA - Confirmed Defect','Confirmed Defect')"
                Case Me.NavBarEnh.Caption 'Open Enhancements
                    FLEXSMgmtTableAdapter.FillActiveEnhancements(ProdSupport_DataSet1.FLEXSMgmt)
                    FLEXSMgmtBindingSource.Filter = "Status IN ('AODA - Enhancement','Enhancement - Escalated to Product')"
                Case Me.NavBarFLEXSDone.Caption 'Closed FLEXS
                    FLEXSMgmtTableAdapter.Fill(ProdSupport_DataSet1.FLEXSMgmt)
                    FLEXSMgmtBindingSource.Filter = "Status IN ('AODA - Confirmed Defect Fixed','AODA - Enhancement Released','Confirmed Defect - Fixed','Enhancement - Released')"
                Case Me.NavBarFLEXS.Caption 'Active FLEXS
                    FLEXSMgmtTableAdapter.FillActiveFLEXS(ProdSupport_DataSet1.FLEXSMgmt)
                    FLEXSMgmtBindingSource.Filter = "Status IN ('AODA - Confirmed Defect','AODA - Enhancement','Confirmed Defect','Enhancement - Escalated to Product')"

            End Select
        Catch ex As Exception
            ' Log the exception details
            MessageBox.Show("An error occurred while filling the " & fillMethod & " data: " & ex.Message)
        End Try
    End Sub

    Private Sub LoadDataAsync_NavBar(ByVal FillWhat As String)

        If Not Telerik.WinControls.UI.RadOverlayManager.IsActive Then Telerik.WinControls.UI.RadOverlayManager.Show(Me)


        ' Start a new thread to load the data asynchronously
        Dim loadThread As New Thread(Sub()
                                         'FillData_NavBar(FillWhat)
                                         Dim newDataSet = FillDataSetAuditHours(FillWhat)

                                         Me.Invoke(New Action(Sub()
                                                                  If FillWhat = "FillAudit" Then

                                                                      Me.ProdSupport_DataSet1.Merge(newDataSet)
                                                                      'Dim conn As New OleDbConnection(My.Settings.DB_Connection)
                                                                      'Dim cmd As New OleDbCommand(QryUpdHoursComments, conn)

                                                                      'Using conn
                                                                      '    conn.Open()
                                                                      '    If CInt(cmd.ExecuteNonQuery) > 0 Then
                                                                      '        MsgBox("Comment saved!", , "Success!")
                                                                      '        'Me.AuditTableAdapter1.Fill(Me.ProdSupport_DataSet1.Audit)
                                                                      '        FillData(FillWhat)
                                                                      '        'If GVIssues.IsEditFormVisible Then
                                                                      '        '    GVIssues.RefreshEditor(True)
                                                                      '        'GVIssues.for
                                                                      '        'End If
                                                                      '    Else
                                                                      '        MsgBox("Comment failed to save!", "Error!")
                                                                      '    End If
                                                                      '    'Me.TextEdit2.Text = ""
                                                                      'End Using
                                                                      'conn.Close()

                                                                  ElseIf FillWhat = "FillHours" Then

                                                                      'MsgBox("Data is refreshing now!")
                                                                      Me.ProdSupport_DataSet1.Merge(newDataSet)
                                                                      'Using connection As New OleDb.OleDbConnection(My.Settings.DB_Connection)
                                                                      '    connection.Open()

                                                                      '    For Each selectedRange In dateAddedRng
                                                                      '        Dim startDate As Date = selectedRange.StartDate
                                                                      '        Dim endDate As Date = selectedRange.EndDate '.AddDays(-1) ' Make endDate exclusive

                                                                      '        ' Handle single date selection
                                                                      '        If startDate = endDate Then
                                                                      '            InsertRecord(startDate, issueID, quantity, employee, billable, details, connection)
                                                                      '            Continue For
                                                                      '        End If

                                                                      '        ' Handle date range selection
                                                                      '        For currentDate As Integer = 0 To (endDate - startDate).TotalDays - 1
                                                                      '            InsertRecord(startDate.AddDays(currentDate), issueID, quantity, employee, billable, details, connection)
                                                                      '        Next
                                                                      '    Next
                                                                      'End Using
                                                                  Else
                                                                      FillData_NavBar(FillWhat)
                                                                  End If

                                                                  If Telerik.WinControls.UI.RadOverlayManager.IsActive Then Telerik.WinControls.UI.RadOverlayManager.Close()
                                                                  'SplashScreenManager1.CloseWaitForm()

                                                              End Sub))
                                     End Sub)

        ' Start the thread
        loadThread.Start()
    End Sub
    Private Sub InsertRecords(hoursWorked As HoursWorked, issueID As Integer, employee As String, connection As OleDb.OleDbConnection)
        Dim sqlQuery As String = "INSERT INTO tbl_HoursWorkedLog (Issue_ID, Hours_Worked_Date, Hours_Worked_Amt, Employee, Billable, Details) VALUES (?, ?, ?, ?, ?, ?)"

        Using command As New OleDb.OleDbCommand(sqlQuery, connection)
            command.Parameters.Add(New OleDb.OleDbParameter("Issue_ID", Convert.ToInt32(issueID)))
            command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Date", OleDb.OleDbType.Date)) 'dateAdded))
            command.Parameters("Hours_Worked_Date").Value = hoursWorked.WorkDate
            command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Amt", hoursWorked.Quantity))
            command.Parameters.Add(New OleDb.OleDbParameter("Employee", employee))
            command.Parameters.Add(New OleDb.OleDbParameter("Billable", hoursWorked.Billable))
            command.Parameters.Add(New OleDb.OleDbParameter("Details", If(String.IsNullOrEmpty(hoursWorked.Details), DBNull.Value, hoursWorked.Details)))

            command.ExecuteNonQuery()
        End Using
    End Sub

    Private Sub InsertRecord(currentDate As Date, issueID As Integer, quantity As Decimal, employee As String, billable As Boolean, details As String, connection As OleDb.OleDbConnection)
        Dim sqlQuery As String = "INSERT INTO tbl_HoursWorkedLog (Issue_ID, Hours_Worked_Date, Hours_Worked_Amt, Employee, Billable, Details) VALUES (?, ?, ?, ?, ?, ?)"

        Using command As New OleDb.OleDbCommand(sqlQuery, connection)
            'command.Parameters.Add(New OleDb.OleDbParameter("Issue_ID", issueID))
            'command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Date", currentDate))
            'command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Amt", quantity))
            'command.Parameters.Add(New OleDb.OleDbParameter("Employee", employee))
            'command.Parameters.Add(New OleDb.OleDbParameter("Billable", billable))
            'command.Parameters.Add(New OleDb.OleDbParameter("Details", If(String.IsNullOrEmpty(details), DBNull.Value, details)))
            command.Parameters.Add(New OleDb.OleDbParameter("Issue_ID", Convert.ToInt32(issueID)))
            command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Date", OleDb.OleDbType.Date)) 'dateAdded))
            command.Parameters("Hours_Worked_Date").Value = currentDate
            command.Parameters.Add(New OleDb.OleDbParameter("Hours_Worked_Amt", quantity))
            command.Parameters.Add(New OleDb.OleDbParameter("Employee", employee))
            command.Parameters.Add(New OleDb.OleDbParameter("Billable", billable))
            command.Parameters.Add(New OleDb.OleDbParameter("Details", If(String.IsNullOrEmpty(details), DBNull.Value, details)))

            command.ExecuteNonQuery()
            'If CInt(command.ExecuteNonQuery) > 0 Then
            '    MsgBox("Successfully saved for " & currentDate.ToShortDateString() & "!", , "Success!")
            'Else
            '    MsgBox("Hours failed to save for " & currentDate.ToShortDateString() & "!", "Error!")
            'End If
        End Using
    End Sub

#End Region

#Region "JIRA Code"

    Private JIRAdataTable As New DataTable()

    Private Sub Initialize_DGView()
        If GCtrlJIRASearch.DataSource Is Nothing Then
            Telerik.WinControls.UI.RadOverlayManager.Show(Me.GCtrlJIRASearch)

            With Me.GVJIRASearch
                .OptionsView.ColumnAutoWidth = False

                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Key",
                    .Caption = "Key"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Summary",
                    .Caption = "Summary"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Status",
                    .Caption = "Status"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Assignee",
                    .Caption = "Assignee"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Reporter",
                    .Caption = "Reporter"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Created",
                    .Caption = "Created"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Updated",
                    .Caption = "Updated"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Labels",
                    .Caption = "Labels"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "Carriers",
                    .Caption = "Carriers"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "FLEXSClients",
                    .Caption = "Clients"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "EpicName",
                    .Caption = "Epic Name"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "EpicLink",
                    .Caption = "Epic Link"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "ReleaseDate",
                    .Caption = "Release Date"
                })
                .Columns.Add(New DevExpress.XtraGrid.Columns.GridColumn() With {
                    .FieldName = "ReleaseName",
                    .Caption = "Release"
                })
                .BestFitColumns()
            End With
        Else
            Telerik.WinControls.UI.RadOverlayManager.Show(Me.GCtrlJIRASearch)
            GCtrlJIRASearch.DataSource = Nothing
        End If

        JIRAdataTable = New DataTable

        With JIRAdataTable.Columns
            .Add("Key", GetType(String))
            .Add("Summary", GetType(String))
            .Add("Status", GetType(String))
            .Add("Assignee", GetType(String))
            .Add("Reporter", GetType(String))
            .Add("Created", GetType(DateTime))
            .Add("Updated", GetType(DateTime))
            .Add("Labels", GetType(String))
            .Add("Carriers", GetType(String))
            .Add("FLEXSClients", GetType(String))
            .Add("EpicName", GetType(String))
            .Add("EpicLink", GetType(String))
            .Add("ReleaseDate", GetType(String))
            .Add("ReleaseName", GetType(String))
        End With

        GCtrlJIRASearch.DataSource = JIRAdataTable
        'GridControl3.MainView. = JIRAdataTable

    End Sub

    Private Sub TxtJQLString_EditValueChanged(sender As Object, e As EventArgs) Handles TxtJQLString.EditValueChanged
        Me.GVJIRASearch.Columns.Clear()

    End Sub

    Private Sub btnSearchFLEXS_Click(sender As Object, e As EventArgs) Handles btnSearchFLEXS.Click
        Initialize_DGView()
        ' Construct the Jira search URL
        Dim url As String = "https://jira.tools.telushealth.com/rest/api/2/search?jql=" + TxtJQLString.Text + "&maxResults=50" '+ SpinMaxRes.Value.ToString

        Try
            ' Create a WebClient to download the JSON response
            Dim client As WebClient = New WebClient()
            client.Headers("Authorization") = "Bearer " + "ODAwNDc5MDE5OTk4Op6GvljcN/HFEyy5z1uJQyoV8F6m"
            Dim json As String = client.DownloadString(url)

            ' Parse the JSON response using Newtonsoft.Json
            Dim obj As JObject = JObject.Parse(json)
            Dim issues As JArray = obj("issues")
            For Each issue In issues
                ' Extract the key and summary fields from each issue
                Dim key As String = issue("key").ToString()
                Dim summary As String = issue("fields")("summary").ToString()
                Dim Status As String = issue("fields")("status")("name").ToString()
                Dim Assignee As String = If(issue("fields")("assignee").Count <> 0, issue("fields")("assignee")("displayName").ToString(), "Unassigned")
                Dim Reporter As String = issue("fields")("reporter")("displayName").ToString()
                Dim Created As DateTime = CDate(issue("fields")("created").ToString())
                Dim Updated As DateTime = CDate(issue("fields")("updated").ToString())
                Dim Labels As String = Trim(Replace(Replace(Replace(Replace(Replace(issue("fields")("labels").ToString(), """", ""), "[" & vbCrLf, ""), vbCrLf & "]", ""), vbCrLf, ""), "  ", " "))
                Dim Carriers As String = ""
                If issue("fields")("customfield_12704").Count <> 0 Then
                    For i = 0 To issue("fields")("customfield_12704").Count - 1
                        If i = 0 Then
                            Carriers = issue("fields")("customfield_12704").Item(i)("value").ToString
                        Else
                            Carriers += ", " & issue("fields")("customfield_12704").Item(i)("value").ToString
                        End If
                    Next
                End If
                Dim FLEXSClients As String = Trim(Replace(Replace(Replace(Replace(Replace(issue("fields")("customfield_12705").ToString(), """", ""), "[" & vbCrLf, ""), vbCrLf & "]", ""), vbCrLf, ""), "  ", " "))

                Dim EpicName As String = ""
                Dim EpicLink As String = ""

                Try
                    EpicName = issue("fields")("customfield_10004").ToString()
                    EpicLink = issue("key").ToString()
                Catch ex As Exception
                    'MsgBox(ex.Message & vbNewLine & vbNewLine & "Update failed")
                End Try

                Try
                    If EpicLink = "" Then EpicLink = issue("fields")("customfield_10002").ToString()
                Catch ex As Exception
                    'MsgBox(ex.Message & vbNewLine & vbNewLine & "Update failed")
                End Try

                Dim ReleaseDate As String = ""
                Try
                    ReleaseDate = issue("fields")("fixVersions").Item(0)("releaseDate").ToString()
                Catch
                End Try

                Dim ReleaseName As String = ""
                Try
                    ReleaseName = issue("fields")("fixVersions").Item(0)("name").ToString()
                Catch
                End Try
                JIRAdataTable.Rows.Add(key, summary, Status, Assignee, Reporter, Created, Updated, Labels, Carriers, FLEXSClients, EpicName, EpicLink, ReleaseDate, ReleaseName)

            Next

            Me.GCtrlJIRASearch.RefreshDataSource()
            Me.GVJIRASearch.RefreshData()

            For Each gridColumn As DevExpress.XtraGrid.Columns.GridColumn In GVJIRASearch.Columns
                gridColumn.Visible = True
            Next
            GVJIRASearch.BestFitColumns()



        Catch Ex As Exception
            Select Case Ex.Message
                Case "The remote server returned an error: (400) Bad Request."
                    MsgBox("The request is invalid!", vbExclamation, "Invalid Request")
                Case Else
                    MsgBox(Ex.Message)
            End Select

        End Try
        Telerik.WinControls.UI.RadOverlayManager.Close()
    End Sub

    Private Sub btnJQLSnippets_ListItemClick(sender As Object, e As DevExpress.XtraBars.ListItemClickEventArgs) Handles btnJQLSnippets.ListItemClick
        Dim coucou As DevExpress.XtraBars.BarListItem = e.Item ')(DevExpress.XtraBars.BarListItem = e.Item)
        Me.TxtJQLString.Text = coucou.Strings(e.Index)
        'MsgBox(coucou.Strings(e.Index))
        'Dim cheee As String = coucou.Strings(e.Index)
        'Dim aaa As String = ((e.Item As DevExpress.XtraBars.BarListItem).Strings(e.index))
    End Sub

    Private Sub TxtJQLString_ButtonClick(sender As Object, e As DevExpress.XtraEditors.Controls.ButtonPressedEventArgs) Handles TxtJQLString.ButtonClick
        'Me.TxtJQLString.SelectAll()
        Me.TxtJQLString.Text = String.Empty
        Me.TxtJQLString.Focus()
    End Sub

#End Region

#Region "JIRA Information on a ticket"
    Private Sub MemoEdit1_EditValueChanged(sender As Object, e As EventArgs) Handles MemoEdit1.EditValueChanged


    End Sub

    Private Sub MemoEdit1_Click(sender As Object, e As EventArgs) Handles MemoEdit1.Click
        Dim ticketKey As String = "FLEX-2798"
        ' Fetch the ticket details, including comments and activity history
        Dim detailsRequest As HttpWebRequest = DirectCast(WebRequest.Create("https://jira.tools.telushealth.com/rest/api/2/issue/" & ticketKey & "?expand=changelog"), HttpWebRequest)
        detailsRequest.Headers.Add("Authorization", "Bearer ODAwNDc5MDE5OTk4Op6GvljcN/HFEyy5z1uJQyoV8F6m") ' Replace YOUR_API_TOKEN with your JIRA API token
        detailsRequest.ContentType = "application/json"
        detailsRequest.Method = "GET"

        Dim detailsResponse As WebResponse = detailsRequest.GetResponse()
        Dim detailsReader As StreamReader = New StreamReader(detailsResponse.GetResponseStream())
        Dim detailsResponseString As String = detailsReader.ReadToEnd()

        ' Parse the JSON response to get the comments and activity history
        Dim details As JObject = JObject.Parse(detailsResponseString)
        'Dim summary As String = issue("fields")("summary").ToString()
        Dim comments As JArray = details.SelectToken("fields.comment.comments")
        Dim activityHistory As JArray = details.SelectToken("changelog.histories")

        ' Populate the commentsTextBox
        Dim commentsText As New StringBuilder()
        For Each comment As JObject In comments
            Dim author As String = comment.SelectToken("author.displayName").ToString()
            Dim created As String = comment.SelectToken("created").ToString()
            Dim body As String = comment.SelectToken("body").ToString()

            ' Replace tagged usernames with display names
            Dim regex As New Regex("\[~(\w+)\]")
            Dim matches As MatchCollection = regex.Matches(body)

            For Each match As Match In matches
                Dim taggedUsername As String = match.Groups(1).Value
                Dim taggedDisplayName As String = GetDisplayNameFromUsername(taggedUsername, "ODAwNDc5MDE5OTk4Op6GvljcN/HFEyy5z1uJQyoV8F6m") ' Replace MY_API_TOKEN with your JIRA API token
                body = body.Replace(taggedUsername, taggedDisplayName)
            Next

            commentsText.AppendLine($"Author: {author}")
            commentsText.AppendLine($"Created: {created}")
            commentsText.AppendLine($"Comment: {body}")
            commentsText.AppendLine(New String("-"c, 40))
        Next
        Me.MemoEdit1.Text = commentsText.ToString()

        ' Populate the activityHistoryTextBox
        Dim activityText As New StringBuilder()
        For Each activity As JObject In activityHistory
            Dim user As String = activity.SelectToken("author.displayName").ToString()
            Dim created As String = activity.SelectToken("created").ToString()
            Dim items As JArray = activity.SelectToken("items")

            activityText.AppendLine($"User: {user}")
            activityText.AppendLine($"Created: {created}")

            For Each item As JObject In items
                Dim field As String = item.SelectToken("field").ToString()
                Dim fromString As String = item.SelectToken("fromString").ToString()
                Dim toString As String = item.SelectToken("toString").ToString()

                activityText.AppendLine($"Field: {field}")
                activityText.AppendLine($"From: {fromString}")
                activityText.AppendLine($"To: {toString}")
            Next

            activityText.AppendLine(New String("-"c, 40))
        Next
        Me.MemoEdit2.Text = activityText.ToString()
    End Sub

    Private Function GetDisplayNameFromUsername(ByVal username As String, ByVal apiToken As String) As String
        Dim userRequest As HttpWebRequest = DirectCast(WebRequest.Create("https://jira.tools.telushealth.com/rest/api/2/user?username=" & username), HttpWebRequest)
        userRequest.Headers.Add("Authorization", "Bearer " & apiToken) ' Use the provided API token
        userRequest.ContentType = "application/json"
        userRequest.Method = "GET"

        Dim userResponse As WebResponse = userRequest.GetResponse()
        Dim userReader As StreamReader = New StreamReader(userResponse.GetResponseStream())
        Dim userResponseString As String = userReader.ReadToEnd()

        Dim userDetails As JObject = JObject.Parse(userResponseString)
        Return userDetails.SelectToken("displayName").ToString()
    End Function






#End Region

    Private Sub GVIssues_CalcRowHeight(sender As Object, e As RowHeightEventArgs) Handles GVIssues.CalcRowHeight
        'MsgBox(e.RowHeight)
        'e.RowHeight = 10
    End Sub

    Private Sub repoDateEdit_TodayClick(sender As Object, e As EventArgs) Handles repoDateEdit.TodayClick

    End Sub

    Public Class AddHoursUserControl
        Inherits DevExpress.XtraEditors.XtraUserControl

        Private dtDate As DateEdit
        Private spHours As SpinEdit
        Private chkBillable As CheckEdit
        Private meDetails As MemoEdit
        Private gridViewUserControl As GridViewUserControl

        Public Sub New()
            Dim lc As New DevExpress.XtraLayout.LayoutControl()
            lc.Dock = DockStyle.Fill
            Me.dtDate = New DateEdit() With {.EditValue = Now()}
            Me.dtDate.Properties.CalendarView = Repository.CalendarView.Fluent
            Me.dtDate.Properties.CalendarTimeEditing = DevExpress.Utils.DefaultBoolean.True
            Me.dtDate.Properties.SelectionMode = Repository.CalendarSelectionMode.Multiple
            Me.dtDate.SyncSelectionWithEditValue = True
            Me.dtDate.Properties.ShowClear = False
            Me.dtDate.Properties.ShowToday = True
            Me.dtDate.Properties.HighlightTodayCellWhenSelected = False
            Me.spHours = New SpinEdit()
            Me.spHours.Properties.Increment = 0.25
            Me.chkBillable = New CheckEdit() With {.Text = "Billable"}
            Me.meDetails = New MemoEdit
            Me.meDetails.Properties.LinesCount = 3
            lc.AddItem("Date", dtDate).TextVisible = True
            lc.AddItem("Quantity", spHours).TextVisible = True
            lc.AddItem(String.Empty, chkBillable)
            lc.AddItem("Details", meDetails).TextVisible = True
            Me.Controls.Add(lc)
            Me.Height = 200
            Me.Dock = DockStyle.Top
            Me.spHours.Focus()

            AddHandler Me.dtDate.Properties.TodayClick, Sub(sender, e)
                                                            Me.dtDate.DateTime = Now()
                                                            Me.dtDate.EditValue = Now()
                                                        End Sub
        End Sub
        Public ReadOnly Property AddDate() As DateTime
            Get
                Return dtDate.DateTime
            End Get
        End Property
        Public ReadOnly Property DateRange() As DateRangeCollection
            Get
                Return dtDate.SelectedRanges
            End Get
        End Property
        Public ReadOnly Property Quantity() As Double
            Get
                Return spHours.Value
            End Get
        End Property
        Public ReadOnly Property Billable() As Boolean
            Get
                Return Me.chkBillable.Checked
            End Get
        End Property
        Public ReadOnly Property Details() As String
            Get
                Return meDetails.Text
            End Get
        End Property
    End Class

    Public Class AddHoursMultiDaysUserControl
        Inherits DevExpress.XtraEditors.XtraUserControl

        Private dtDate As DateEdit
        Private spHours As SpinEdit
        Private chkBillable As CheckEdit
        Private meDetails As MemoEdit
        Private lc As DevExpress.XtraLayout.LayoutControl
        Private grdView As DevExpress.XtraGrid.GridControl
        Private view As GridView
        Private dataSource As BindingList(Of HoursWorked)
        Private gridViewItem As LayoutControlItem
        Private _workedHours As New BindingList(Of HoursWorked)

        Public Property WorkedHours As BindingList(Of HoursWorked)
            Get
                Return _workedHours
            End Get
            Set(value As BindingList(Of HoursWorked))
                _workedHours = value
            End Set
        End Property

        Public Sub New()
            lc = New DevExpress.XtraLayout.LayoutControl()
            lc.Dock = DockStyle.Fill

            dtDate = New DateEdit() With {.EditValue = Now()}
            dtDate.Properties.CalendarView = Repository.CalendarView.Fluent
            dtDate.Properties.CalendarTimeEditing = DevExpress.Utils.DefaultBoolean.True
            dtDate.Properties.SelectionMode = Repository.CalendarSelectionMode.Multiple
            dtDate.SyncSelectionWithEditValue = True
            dtDate.Properties.ShowClear = False
            dtDate.Properties.ShowToday = True
            dtDate.Properties.HighlightTodayCellWhenSelected = False

            spHours = New SpinEdit()
            spHours.Properties.Increment = 0.25

            chkBillable = New CheckEdit() With {.Text = "Billable"}

            meDetails = New MemoEdit
            meDetails.Properties.LinesCount = 3

            'grdView = New DevExpress.XtraGrid.GridControl()
            'view = New GridView(grdView)
            'grdView.MainView = view
            'grdView.Visible = False
            'dataSource = New BindingList(Of HoursWorked)()
            'grdView.DataSource = dataSource

            lc.AddItem("Date", dtDate).TextVisible = True
            lc.AddItem("Quantity", spHours).TextVisible = True
            lc.AddItem(String.Empty, chkBillable)
            lc.AddItem("Details", meDetails).TextVisible = True
            'gridViewItem = lc.AddItem("GridView", grdView)
            'gridViewItem.TextVisible = False
            'gridViewItem.Visibility = Utils.LayoutVisibility.Never

            Me.Controls.Add(lc)
            ' Set AutoSize and AutoSizeMode properties of the form
            'Dim form As Form = lc.FindForm()
            'If form IsNot Nothing Then
            Me.AutoSize = True
            Me.AutoSizeMode = AutoSizeMode.GrowAndShrink
            'End If

            Me.MinimumSize = New Size(300, 200)
            'Me.Height = 2000
            'Me.Width = 500
            'Me.Dock = DockStyle.Top
            'lc.GetItemByControl(spHours).Control.Focus() 'spHours.Focus()
            GridViewUserControl = New GridViewUserControl()
            GridViewUserControl.Visible = False
            lc.AddItem("GridView", GridViewUserControl).TextVisible = False
            'AddHandler 
            AddHandler GridViewUserControl.OnConfirm, AddressOf GridViewUserControl_OnConfirm

            AddHandler dtDate.EditValueChanged, Sub()
                                                    dataSource.Clear()
                                                    For Each selectedRange In dtDate.SelectedRanges
                                                        Dim startDate As Date = selectedRange.StartDate
                                                        Dim endDate As Date = selectedRange.EndDate
                                                        For currentDate As Integer = 0 To ((endDate - startDate).TotalDays - 1)
                                                            dataSource.Add(New HoursWorked With {.WorkDate = startDate.AddDays(currentDate), .Quantity = Quantity, .Billable = Billable, .Details = Details})
                                                        Next
                                                    Next
                                                    If dataSource.Count > 1 Then 'dtDate.SelectedRanges.Count > 2
                                                        ShowGridView()
                                                    Else
                                                        HideGridView()
                                                    End If
                                                End Sub
        End Sub

        Public ReadOnly Property AddDate() As DateTime
            Get
                Return dtDate.DateTime
            End Get
        End Property

        Public ReadOnly Property DateRange() As DateRangeCollection
            Get
                Return dtDate.SelectedRanges
            End Get
        End Property

        Public ReadOnly Property Quantity() As Double
            Get
                Return spHours.Value
            End Get
        End Property

        Public ReadOnly Property Billable() As Boolean
            Get
                Return Me.chkBillable.Checked
            End Get
        End Property

        Public ReadOnly Property Details() As String
            Get
                Return meDetails.Text
            End Get
        End Property
        Private Sub ShowGridView()
            'Dim form As Form = lc.FindForm()
            'form.AutoSize = True
            'form.AutoSizeMode = AutoSizeMode.GrowAndShrink
            'gridViewItem.Visibility = Utils.LayoutVisibility.Always
            'lc.LayoutChanged() ' Refreshes the layout
            'lc.BestFit()
            GridViewUserControl.UpdateDataSource(dataSource)
            GridViewUserControl.Visible = True
            lc.LayoutChanged()
            lc.BestFit()
        End Sub

        Private Sub HideGridView()
            'gridViewItem.Visibility = Utils.LayoutVisibility.Never
            'lc.LayoutChanged() ' Refreshes the layout
            'lc.BestFit()
            'Dim form As Form = lc.FindForm()
            'form.AutoSize = True
            'form.AutoSizeMode = AutoSizeMode.GrowAndShrink
            GridViewUserControl.Visible = False
            lc.LayoutChanged()
            lc.BestFit()
        End Sub

        Private Sub GridViewUserControl_OnConfirm(sender As Object, e As EventArgs)
            'Handle the confirm event here.
            HideGridView()
        End Sub

        Private Sub AddHoursUserControl_Load(sender As Object, e As EventArgs) Handles Me.Load
            ' Set AutoSize and AutoSizeMode properties of the form
            'Dim form As Form = lc.FindForm()
            'If form IsNot Nothing Then
            Me.AutoSize = True
            Me.AutoSizeMode = AutoSizeMode.GrowAndShrink
            'End If
        End Sub
    End Class

    Public Class HoursWorked
        Public Property WorkDate As DateTime
        Public Property Quantity As Double
        Public Property Billable As Boolean
        Public Property Details As String
    End Class

    Public Class GridViewUserControl
        Inherits DevExpress.XtraEditors.XtraUserControl

        Private gridView As DevExpress.XtraGrid.GridControl
        Private view As GridView
        Private dataSource As BindingList(Of HoursWorked)
        Private confirmButton As SimpleButton

        Public Event OnConfirm As EventHandler

        Public Sub New()
            gridView = New DevExpress.XtraGrid.GridControl()
            view = New GridView(gridView)
            gridView.MainView = view
            dataSource = New BindingList(Of HoursWorked)()
            gridView.DataSource = dataSource

            confirmButton = New SimpleButton() With {.Text = "Confirm"}

            AddHandler confirmButton.Click, Sub(s, e) RaiseEvent OnConfirm(Me, EventArgs.Empty)

            Dim layoutControl As New DevExpress.XtraLayout.LayoutControl()
            layoutControl.Dock = DockStyle.Fill

            layoutControl.AddItem("GridView", gridView).TextVisible = False
            layoutControl.AddItem(String.Empty, confirmButton)

            Me.Controls.Add(layoutControl)
            'Me.Controls.Add(gridView)
        End Sub

        Public Sub UpdateDataSource(data As BindingList(Of HoursWorked))
            dataSource = data
            gridView.DataSource = dataSource
            gridView.RefreshDataSource()
        End Sub
    End Class


    Public Class AddCommentUserControl
        Inherits DevExpress.XtraEditors.XtraUserControl

        Private meComment As MemoEdit

        Public Sub New()
            Dim lc As New DevExpress.XtraLayout.LayoutControl()
            lc.Dock = DockStyle.Fill
            Me.meComment = New MemoEdit
            Me.meComment.Properties.LinesCount = 3
            Me.meComment.Properties.ScrollBars = ScrollBars.None
            lc.AddItem("Comment", meComment).TextVisible = False
            Me.Controls.Add(lc)
            Me.Height = 100
            Me.Dock = DockStyle.Top
            Me.meComment.Focus()
            lc.GetItemByControl(meComment).Control.Focus()
        End Sub

        Public ReadOnly Property Comment() As String
            Get
                Return meComment.Text
            End Get
        End Property
    End Class

End Class

